import os


from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from dotenv import load_dotenv

from mainapp.models import Product

load_dotenv()


import django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rehearsals.settings')
django.setup()


from bot.sync_def.logic_handler_models_func import (get_or_create_new_user,
                                                    get_product,
                                                    get_basket_items,
                                                    add_to_cart,
                                                    remove_from_cart,
                                                    get_language_user,
                                                    set_lang,
                                                    get_products_by_category,
                                                    get_products_count
                                                    )
from bot.text_bot.text_ru import (text_main_menu,
                                  text_user_profile,
                                  text_rehearsals_menu,
                                  product_keyboard,
                                  next_page_keyboard,
                                  remove_button,
                                  text_basket_menu,
                                  text_settings_menu,
                                  )
from bot.text_bot.text_uz import text_main_menu_uz
from bot.state.state_bot import MainMenu


flag_uzbekistan = '\U0001F1FA\U0001F1FF'


def rehearsals_ru_logic_handler(router: Router):


    @router.message(Command('start'))
    async def start_message_handler(message: Message, state: FSMContext):
        user = message.from_user.full_name
        tg_id = message.from_user.id

        await get_or_create_new_user(tg_id)


        await message.answer(
            f'{user}{text_main_menu()[0]}',
            reply_markup=text_main_menu()[1]
        )
        await state.set_state(MainMenu.MAIN_WINDOW)


    @router.message(lambda message: message.text == 'üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
    async def personal_account_handler(message: Message, state: FSMContext):

        await state.set_state(MainMenu.PERSONAL_ACCOUNT)

        user = message.from_user.full_name

        await message.answer(
            f'{user}{text_user_profile()[0]}',
            reply_markup=text_user_profile()[1]
        )


    @router.message(lambda message: message.text == 'üìú –ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫')
    async def history_buy_handler(message: Message):
        await message.answer(
            '–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞'
        )


    @router.message(lambda message: message.text == 'üí≥ –ö–≤–∏—Ç–∞–Ω—Ü–∏–∏ –æ–ø–ª–∞—Ç')
    async def payment_receipts(message: Message):
        await message.answer(
            '–£ –≤–∞—Å –Ω–µ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏–π –æ–ø–ª–∞—Ç'
        )


    @router.message(lambda message: message.text == 'üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã')
    async def rehearsals_menu(message: Message, state: FSMContext):

        await message.answer(
            text_rehearsals_menu()[0],
            reply_markup=text_rehearsals_menu()[1]
        )

        await state.set_state(MainMenu.REHEARSALS)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    @router.message(F.text.in_(['ü•£ –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞', 'üç≤ –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞', 'üç∞ –î–µ—Å–µ—Ä—Ç—ã', 'üçπ –ù–∞–ø–∏—Ç–∫–∏']))
    async def category_handler(message: Message):
        category_map = {
            'ü•£ –ü–µ—Ä–≤—ã–µ –±–ª—é–¥–∞': 'first',
            'üç≤ –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞': 'second',
            'üç∞ –î–µ—Å–µ—Ä—Ç—ã': 'dessert',
            'üçπ –ù–∞–ø–∏—Ç–∫–∏': 'drink'
        }
        category = category_map[message.text]

        products = await get_products_by_category(category, 0, 3)
        total_count = await get_products_count(category)

        if not products:
            await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.")
            return


        for product in products:

            if product.image:
                image_path = product.image.path
                photo = FSInputFile(image_path)

                await message.answer_photo(
                    photo=photo,
                    caption=f"üçΩ {product.name_ru}\n{product.description_ru}\n –¶–µ–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞ - {product.price} —Å—É–º–º",
                    reply_markup=product_keyboard(product.id)
                )
            else:
                await message.answer(
                    f"üçΩ {product.name_ru}\n{product.description_ru}\n –¶–µ–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞ - {product.price} —Å—É–º–º",
                    reply_markup=product_keyboard(product.id)
                )

        # –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
        next_kb = next_page_keyboard(category, 0, total_count)
        if next_kb:
            await message.answer(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –±–ª—é–¥–∞:",
                reply_markup=next_kb
            )


    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    @router.callback_query(F.data.startswith("next_"))
    async def next_page_handler(callback: CallbackQuery):
        _, category, page_str = callback.data.split("_")
        page = int(page_str)

        products = await get_products_by_category(category, page * 3, 3)
        total_count = await get_products_count(category)

        for product in products:

            if product.image:
                image_path = product.image.path
                photo = FSInputFile(image_path)

                await callback.message.answer_photo(
                    photo=photo,
                    caption=f"üçΩ {product.name_ru}\n{product.description_ru}\n –¶–µ–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞ - {product.price} —Å—É–º–º",
                    reply_markup=product_keyboard(product.id)
                )
            else:
                await callback.message.answer(
                    f"üçΩ {product.name_ru}\n{product.description_ru}\n  –¶–µ–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞ - {product.price} —Å—É–º–º",
                    reply_markup=product_keyboard(product.id)
                )

        next_kb = next_page_keyboard(category, page, total_count)

        if next_kb:
            await callback.message.answer(
                "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë –±–ª—é–¥–∞:",
                reply_markup=next_kb
            )

        await callback.answer()


    @router.callback_query(F.data.startswith("addcart_"))
    async def add_to_cart_handler(callback: CallbackQuery):
        product_id = int(callback.data.split("_")[1])

        try:
            user = await get_or_create_new_user(callback.from_user.id)
            product = await get_product(product_id)

        except Product.DoesNotExist:
            await callback.answer(
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                show_alert=True
            )
            return

        except Exception as e:
            await callback.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                show_alert=True
            )
            return

        added = await add_to_cart(user, product)

        if added:
            await callback.message.edit_reply_markup(
                reply_markup=remove_button(product_id)
            )
            await callback.answer(
                "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É ‚úÖ",
                show_alert=True
            )
        else:
            await callback.answer(
                "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ",
                show_alert=True
            )


    @router.callback_query(F.data.startswith("delcart_"))
    async def remove_from_cart_handler(callback: CallbackQuery):
        product_id = int(callback.data.split("_")[1])

        try:
            user = await get_or_create_new_user(callback.from_user.id)
            product = await get_product(product_id)

        except Product.DoesNotExist:
            await callback.answer(
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                show_alert=True
            )
            return

        removed = await remove_from_cart(user, product)


        if removed:
            await callback.message.edit_reply_markup(
                reply_markup=product_keyboard(product_id)
            )
            await callback.answer(
                "–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ‚ùå",
                show_alert=True
            )
        else:
            await callback.answer(
                "–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ",
                show_alert=True
            )


    @router.message(lambda message: message.text == 'üß∫ –ö–æ—Ä–∑–∏–Ω–∞')
    async def basket_menu(message: Message, state: FSMContext):
        await state.set_state(MainMenu.BASKET)

        items  = await get_basket_items(message.from_user.id)
        price_product = []

        if not items:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí")
            return

        for item in items:
            product = item.product
            await message.answer(
                f"üçΩ {product.name_ru}\n –¶–µ–Ω–∞ —Ä–µ—Ü–µ–ø—Ç–∞ {product.price} —Å—É–º–º",
                reply_markup=remove_button(product.id)
            )
            price_product.append(product.price)
        await message.answer(
            text_basket_menu(sum(price_product))[0],
            reply_markup=text_basket_menu(sum(price_product))[1]
        )


    @router.callback_query(F.data.startswith("delcart_"))
    async def remove_from_basket(callback: CallbackQuery):
        product_id = int(callback.data.split("_")[1])

        user = await get_or_create_new_user(callback.from_user.id)
        product = await get_product(product_id)

        removed = await remove_from_cart(user, product)

        if not removed:
            await callback.answer("–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        items = await get_basket_items(callback.from_user.id)

        if not items:
            await callback.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return

        # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        keyboard = InlineKeyboardBuilder()

        for item in items:
            product = item.product
            text += f"‚Ä¢ {product.name_ru} ‚Äî {product.price} —Å—É–º\n"
            keyboard.button(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {product.name_ru}",
                callback_data=f"delcart_{product.id}"
            )

        keyboard.adjust(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text,
            reply_markup=keyboard.as_markup()
        )

        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ‚ùå")


    @router.message(lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    async def settings_menu(message: Message, state: FSMContext):
        await state.set_state(MainMenu.SETTINGS)

        language_user = await get_language_user(message.from_user.id)
        text, keyboard = text_settings_menu(language_user)

        await message.answer(
            text,
            reply_markup=keyboard
        )


    @router.message(lambda message: message.text == f'{flag_uzbekistan} O`Z')
    async def set_language_handler(message: Message):
        user_id = message.from_user.id
        user = message.from_user.full_name

        await set_lang(user_id, 'uz')

        await message.answer(
            f'{user} {text_main_menu_uz()[0]}',
            reply_markup=text_main_menu_uz()[1]
        )


    @router.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
    async def backward(message: Message, state: FSMContext):
        current_state = await state.get_state()
        user = message.from_user.full_name

        if current_state == MainMenu.PERSONAL_ACCOUNT:

            await state.set_state(MainMenu.MAIN_WINDOW)

            await message.answer(
                f'{user}{text_main_menu()[0]}',
                reply_markup=text_main_menu()[1]
            )
        elif current_state == MainMenu.REHEARSALS:
            await message.answer(
                f'{user}{text_main_menu()[0]}',
                reply_markup=text_main_menu()[1]
            )
        elif current_state == MainMenu.BASKET:
            await message.answer(
                f'{user}{text_main_menu()[0]}',
                reply_markup=text_main_menu()[1]
            )
        elif current_state == MainMenu.SETTINGS:
            await message.answer(
                f'{user}{text_main_menu()[0]}',
                reply_markup=text_main_menu()[1]
            )


